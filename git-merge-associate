#!/bin/bash
#
# Originally from https://gist.github.com/tvogel/894374
#
# Purpose: manually associate missed renames in merge conflicts
#
# Usage: git merge-associate <our-target> <base> <theirs>
#
# Example: After a failed rename detection A/a -> B/b which results
# in CONFLICT (delete/modify) for A/a and corresponding "deleted by us"
# messages in git status, the following invocation can be used to manually
# establish the link:
#
#     git merge-associate B/b :1:A/a :3:A/a
#
# or using a shell with brace expansion:
#
#     git merge-associate B/b :{1,3}:A/a
#
# This registers 
# - :1:A/a as   :1:B/b
# - HEAD:B/b as :2:B/b
# - :3:A/a as   :3:B/b
# and replaces B/b with a merge-conflict version using  "git checkout -m -- B/b".
# 
# After manual resolution of B/b and "git add B/b", A/a can be resolved by 
# "git rm A/a"
#
#
#
# :1: is the common ancestor,
# :2: is the target branchâ€™s version (typically the current branch),
# :3: is the version from the branch which is being merged.

# For example, if merging from scm/8.3.6-gradle to gradle-merge (aka HEAD), where renames and content changes cause git to get certain mapping wrong.

# merge base is:

# $ git merge-base HEAD scm/8.3.6-gradle
# 3baf4b58edce372dd5f74645f0e21012f315ead0

# $ git ls-tree 3baf4b58edce372dd5f74645f0e21012f315ead0 modules/space-common/tw/test/com/tripwire/common/time/TestTime.java
# 100644 blob c2bdb64e5bfe517519c2555bebc431a40fc30fe8	modules/space-common/tw/test/com/tripwire/common/time/TestTime.java

# $ git ls-tree gradle-merge tw-common/src/test/java/com/tripwire/common/time/TestTime.java
# 100644 blob 93e9441433b84ef4654edf5c5de78d9db241374a	tw-common/src/test/java/com/tripwire/common/time/TestTime.java

# $ git ls-tree scm/8.3.6-gradle tw-common/src/test/java/com/tripwire/common/time/TestTime.java
# 100644 blob 257f2430516d1aefb239dd5345e9b6d3ecec2672	tw-common/src/test/java/com/tripwire/common/time/TestTime.java

# we can run:

# git merge-associate tw-common/src/test/java/com/tripwire/common/time/TestTime.java 3baf4b58edce372dd5f74645f0e21012f315ead0:modules/space-common/tw/test/com/tripwire/common/time/TestTime.java scm/8.3.6-gradle:tw-common/src/test/java/com/tripwire/common/time/TestTime.java

# and it will update the index with:

# 000000 0000000000000000000000000000000000000000 0	tw-common/src/test/java/com/tripwire/common/time/TestTime.java
# 100644 c2bdb64e5bfe517519c2555bebc431a40fc30fe8 1	tw-common/src/test/java/com/tripwire/common/time/TestTime.java
# 100644 93e9441433b84ef4654edf5c5de78d9db241374a 2	tw-common/src/test/java/com/tripwire/common/time/TestTime.java
# 100644 257f2430516d1aefb239dd5345e9b6d3ecec2672 3	tw-common/src/test/java/com/tripwire/common/time/TestTime.java

#
# This generalises to
#
# git merge-associate target_file_name `git merge-base HEAD other_branch_name`:original_file_name other_branch_name:other_file_name
#
#

set -e

get_tree()
{
    SPEC="${!1}"
    TREE=""
    
    if [[ -z "$SPEC" ]]; then
        TREE="EMPTY"
    elif [[ "$SPEC" =~ ^:(.): ]]; then
        TREE="INDEX:${BASH_REMATCH[1]}"
    elif [[ "$SPEC" =~ ^: ]]; then
        TREE="INDEX:0"
    elif [[ "$SPEC" =~ ^([^:]+): ]]; then
        TREE=${BASH_REMATCH[1]}
    else # no colon, considered as HEAD
        eval ${1}="HEAD:${!1}"
        TREE="HEAD"
    fi
    eval ${1}_TREE="$TREE"
    eval ${1}_BASENAME="${SPEC##*:}"
}

get_mode_and_sha()
{
    eval SPEC="\${$1}"
    eval TREE="\${$1_TREE}"
    eval BASENAME="\${$1_BASENAME}"
    RESULT_MODE=""
    RESULT_SHA=""
    case "$TREE" in
        EMPTY)
            RESULT_MODE="100644"
            RESULT_SHA="e69de29bb2d1d6434b8b29ae775ad8c2e48c5391"
        ;;
        INDEX:*)
            [[ "$TREE" =~ :(.) ]]
            REQ_STAGE=${BASH_REMATCH[1]}
            while read MODE SHA STAGE FILEPATH; do
                if ! [ "$STAGE" = "$REQ_STAGE" ]; then
                    continue
                fi
                RESULT_MODE="$MODE"
                RESULT_SHA="$SHA"
                break
            done < <(git ls-files --stage "$BASENAME")
        ;;
        *)
            while read MODE TYPE SHA FILEPATH; do
                RESULT_MODE="$MODE"
                RESULT_SHA="$SHA"
            done < <(git ls-tree "$TREE" "$BASENAME")
        ;;
    esac
    if [ -z "$RESULT_MODE" ] ; then
        echo "Could not determine mode for $SPEC"
        exit 1
    fi
    if [ -z "$RESULT_SHA" ] ; then
        echo "Could not determine SHA1 for $SPEC"
        exit 1
    fi
    eval $1_SHA="$RESULT_SHA"
    eval $1_MODE="$RESULT_MODE"
}

usage() {
    echo "Usage: git [-v] [-t] merge-associate <our-target> <base> <theirs>"
    echo " -v : equivalent to set -x in the script, full tracing"
    echo " -t : trace and don't make changes"
    echo " -r newFileName : rename the file at the same time"
}

VERBOSE=0
while getopts ":vtr:" opt; do
    case $opt in
        r) RENAME=$OPTARG ;;
        t) VERBOSE=1 ;;
        v) set -x;;
        \?) usage
        exit;;
    esac
done
shift $(( OPTIND-1 ))

function trace() {
    [[ $VERBOSE == 1 ]] && echo $*
}

if [ "$#" -ne 3 ]; then
    usage
    exit 1
fi

TARGET="$1"
BASE="$2"
THEIRS="$3"

for VAR in TARGET BASE THEIRS; do
    get_tree $VAR
    get_mode_and_sha $VAR
done

if [ $VERBOSE -eq 0 ] ; then
    CMD="git update-index --index-info"
else
    E=echo
    CMD=cat
fi

if [ -n "$RENAME" ] ; then
    TARGET_BASENAME=$RENAME
fi

$CMD <<EOI
000000 0000000000000000000000000000000000000000 0	$TARGET_BASENAME
$BASE_MODE $BASE_SHA 1	$TARGET_BASENAME
$TARGET_MODE $TARGET_SHA 2	$TARGET_BASENAME
$THEIRS_MODE $THEIRS_SHA 3	$TARGET_BASENAME
EOI

$E git checkout -m -- $TARGET_BASENAME
